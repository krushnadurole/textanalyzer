{"version":3,"sources":["components/About.js","components/NAVBAR.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","className","mode","id","type","onClick","togglemode","NAVBAR","href","title","abouttext","role","placeholder","htmlFor","redmode","redtoggle","Textform","useState","text","setText","hello","sethello","style","color","heading","value","rows","onChange","event","target","backgroundColor","newtext","toUpperCase","showalert","toLowerCase","class","index","indexOf","Alert","alert","msg","defaultProps","Title","App","setmode","document","body","setalert","setred","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.188eaf20.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n\r\n\r\n    // const [mystyle, setstate] = useState(\r\n    //     {\r\n    //         color: 'black',\r\n    //         backgroundColor: 'white'\r\n    //     }\r\n    // )\r\n    // const [mybtn, setbutton] = useState(\"Enalbe the dark moode. \")\r\n\r\n    // const toggle = () => {\r\n    //     if (mystyle.color == 'black') {\r\n    //         setstate(\r\n    //             {\r\n    //                 color: 'white',\r\n    //                 backgroundColor: 'black'\r\n    //             }\r\n    //         )\r\n    //         setbutton(\"Enable the dark mode. \")\r\n    //     }\r\n    //     else {\r\n    //         setstate(\r\n    //             {\r\n    //                 color: 'black',\r\n    //                 backgroundColor: 'white'\r\n    //             }\r\n    //         )\r\n    //         setbutton(\"Enable the white mode. \")\r\n    //     }\r\n    // }\r\n    return (\r\n\r\n\r\n        <>\r\n            <h1 >About us . </h1>\r\n            <div  >\r\n                <div className={`accordion -${props.mode === 'light' ? 'dark' : 'light'}id=\"accordionExample`}  >\r\n                {/* style={mystyle} */}\r\n                    <div className=\"accordion-item\" >\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button  className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" >\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button  className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" >\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button  className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-primary my-3\" onClick={props.togglemode}>Enabled dark mode</button>\r\n                        {/* onClick={toggle}{mybtn} */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","// import react, { useState } from \"react\"\r\n\r\nimport PropTypes from 'prop-types';\r\nexport default function NAVBAR(props) {\r\n\r\n  return (\r\n    <>\r\n\r\n      <div>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-Link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-Link\" href=\"/\">{props.abouttext}</a>\r\n                </li>\r\n                <li className=\"nav-item dropdown\">\r\n                  <a className=\"nav-Link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Dropdown\r\n                  </a>\r\n                  <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                    <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n                    <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                    <li><hr className=\"dropdown-divider\" /></li>\r\n                    <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n                  </ul>\r\n\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-Link disabled\"href=\"/\">Disabled</a>\r\n                </li>\r\n              </ul>\r\n              <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n\r\n                <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n              </form>\r\n              <div className={`form-check form-switch ${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode} />\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >DarkMode</label>\r\n              </div>\r\n              <div className={`form-check form-switch ${props.redmode === 'light' ? 'skyblue' : 'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.redtoggle} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"  >Skybluemode. </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nNAVBAR.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  abouttext: PropTypes.string\r\n};\r\n\r\n\r\n\r\nNAVBAR.defaultProps = {\r\n  Title: \"Home Navbar\",\r\n  abouttext: \"About text content\"\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import react, { useState } from \"react\"\r\n\r\n// import PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom' ;\r\n// export default function NAVBAR(props) {\r\n\r\n//   return (\r\n//     <>\r\n\r\n//       <div>\r\n//         <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n//           <div className=\"container-fluid\">\r\n//             <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n//             <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n//               <span className=\"navbar-toggler-icon\"></span>\r\n//             </button>\r\n//             <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n//               <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n//                 <li className=\"nav-item\">\r\n//                   <Link className=\"nav-Link active\" aria-current=\"page\" to=\"/About\">About</Link>\r\n//                 </li>\r\n//                 <li className=\"nav-item\">\r\n//                   <Link className=\"nav-Link\" to=\"/NAVBAR\">{props.abouttext}</Link>\r\n//                 </li>\r\n//                 <li className=\"nav-item dropdown\">\r\n//                   <a className=\"nav-Link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n//                     Dropdown\r\n//                   </a>\r\n//                   {/* <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n//                     <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n//                     <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n//                     <li><hr className=\"dropdown-divider\" /></li>\r\n//                     <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n//                   </ul> */}\r\n\r\n//                 </li>\r\n//                 <li className=\"nav-item\">\r\n//                   <a className=\"nav-Link disabled\">Disabled</a>\r\n//                 </li>\r\n//               </ul>\r\n//               <form className=\"d-flex\">\r\n//                 <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n\r\n//                 <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n//               </form>\r\n//               <div className={`form-check form-switch ${props.mode==='light'?'dark':'light'}`}>\r\n//                 <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"onClick = {props.togglemode} />\r\n//                 <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >DarkMode</label>\r\n//               </div>\r\n//               <div className={`form-check form-switch ${props.redmode==='light'?'skyblue':'light'}`}>\r\n//                 <input className=\"form-check-input\"onClick = {props.redtoggle} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n//                 <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"  >Skybluemode. </label>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </nav>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n// NAVBAR.propTypes = {\r\n//   title: PropTypes.string.isRequired,\r\n//   abouttext: PropTypes.string\r\n// };\r\n\r\n\r\n\r\n// NAVBAR.defaultProps = {\r\n//   Title: \"Home Navbar\",\r\n//   abouttext: \"About text content\"\r\n// };","import React, { useState } from \"react\";\r\n// import PropTypes from 'prop-types';\r\nexport default function Textform(props) {\r\n    const upper_case = () => {\r\n        // console.log(\"uppercase function clicked. \"+text)\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showalert(\": The text is now in UpperCase\", \"success\")\r\n\r\n    }\r\n    const handlonchange = (event) => {\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n\r\n    }\r\n    const handletext = (event) => {\r\n        // console.log(\"on change\");\r\n        sethello(event.target.value);\r\n\r\n    }\r\n    const lower_case = () => {\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showalert(\": The text is now in LowerrCase\", \"success\")\r\n    }\r\n    const cleartext = () => {\r\n        let newtext = '';\r\n        setText(newtext);\r\n        props.showalert(\": The text is Cleared\", \"success\")\r\n    }\r\n    const find = () => {\r\n        let index = text.indexOf(hello);\r\n        if (index === -1) {\r\n            sethello(\"The text is not in the main content . \");\r\n            props.showalert(\"The String is not found \")\r\n\r\n        }\r\n        else {\r\n            sethello(\"The text is in the main content  and starting index of substring :  \" + hello + \"   is   \" + index);\r\n            props.showalert(\"The String is found \")\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    const [text, setText] = useState(\"\");\r\n    const [hello, sethello] = useState();\r\n\r\n    // const [newstyle, stylefun] = useState(\r\n    //     {\r\n    //         color: 'white',\r\n    //         backgroundColor: 'black'\r\n    //     }\r\n    // );\r\n\r\n    // const [textbtn, textbtnfun] = useState();\r\n\r\n\r\n    // setText(\"Hello yaar kaisa hain \")\r\n    return (\r\n        <>\r\n            <div >\r\n\r\n                <h1 style={{ color: 'light' ? '#b87f39' : 'light' }}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} id=\"myBox\" rows=\"5\" onChange={handlonchange} style={{ backgroundColor: 'grey' }}></textarea>\r\n                </div>\r\n\r\n                <button className=\"btn btn-primary mt-3  m-3 \" onClick={upper_case} >Convert to Uppercase </button>\r\n                <button className=\"btn btn-primary mt-3  m-3\" onClick={lower_case}>Convert to Lowercase  </button>\r\n                <button className=\"btn btn-primary mt-3  m-3\" onClick={cleartext}> Clear the text content </button>\r\n                <label style={{ color: 'black' ? '#b87f39' : 'white' }}>Enter the text that you want to search</label> <br />\r\n\r\n                <div className=\"hello\">\r\n                    <input type=\"text\" class=\"form-control\" value={hello} id=\"myhello\" rows=\"5\" onChange={handletext}></input>\r\n                </div>\r\n                <button className=\"btn btn-primary mt-3  m-3\" onClick={find}> Find  </button>\r\n\r\n\r\n\r\n            </div>\r\n            <div class=\"container\" style={{ color: 'black' ? 'red' : 'light' }}>\r\n                <h2 style={{ color: 'black' ? '#b87f39' : 'white' }}>Yours Text Summary </h2>\r\n                {/* <p style= {{color:'black'?'#b87f39':'white'}}>{text}</p>\r\n                <p style= {{color:'black'?'#b87f39':'light'}}>  {text.split(\" \").length - 1} words and {text.length} characters.</p> \r\n                <label style= {{color:'black'?'#b87f39':'white'}}>Time to read the above content </label>\r\n                <p style= {{color:'black'?'#b87f39':'white'}}> {0.008 * text.split(\" \").length} minutes read</p> \r\n                <h2 style= {{color:'black'?'#b87f39':'white'}}>PREVIEW</h2>\r\n                <p style= {{color:'black'?'#b87f39':'white'}}>{text.length>0?text:\"Enter your text in the above\"}</p>  */}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}","import React from \"react\"\r\n// import PropTypes from 'prop-types';\r\n\r\nexport default function Alert(props) {\r\n\r\n  return (\r\n\r\n    props.alert && <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n      <strong>{props.alert.type}</strong>   <strong>{props.alert.msg}</strong>\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n  );\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport NAVBAR from './components/NAVBAR';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nfunction App() {\n  const togglemode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = 'rgb(13 5 57)'\n      showalert(\": The dark mode has been enabled \", \"Success\")\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white'\n      showalert(\": The light mode has been enabled. \", \"Sucess\")\n    }\n  }\n  const redtoggle = () => {\n    if (redmode === 'light') {\n      setred('#060107');\n      document.body.style.backgroundColor = '#060107'\n      showalert(\": The green mode has been enabled \", \"Success\")\n    }\n    else {\n      setred('light');\n      document.body.style.backgroundColor = 'white'\n      showalert(\": The #060107 mode has been enabled. \", \"Success\")\n\n    }\n\n  }\n\n  const [mode, setmode] = useState('light');//whether dark mode is enabled or not . \n  const [alert, setalert] = useState(null)\n  const [redmode, setred] = useState('light');\n  const showalert = (message, type) => {\n    setalert(\n      {\n        msg: message,\n        type: type\n      }\n\n    )\n    setTimeout(() => {\n      setalert(null, null);\n    }, 1500);\n  }\n\n\n  // setmode('blue')\n  return (\n    <>\n\n\n      {/* <div>\n         <Router>\n      {/* <div>\n        <Link to=\"/\">Home</Link>\n      </div>\n      <div>\n        <Link to=\"/About\">Blog Articles</Link>\n      </div>\n      <div>\n        <Link to=\"/NAVBAR\">Contact Me</Link>\n      </div>\n\n      <hr /> */}\n\n      {/* <Switch>\n        <Route exact path=\"/\">\n        <Alert alert={alert} />\n        <NAVBAR title=\"Textform\" abouttext=\"NavBAr\" mode={mode} redmode = {redmode}togglemode = {togglemode} redtoggle ={redtoggle} />\n        <Textform heading=\"Enter your text here : \" showalert={showalert}   />\n        </Route>\n        <Route path=\"/About\">\n        <Alert alert={alert} />\n        <NAVBAR title=\"Textform\" abouttext=\"NavBAr\" mode={mode} redmode = {redmode}togglemode = {togglemode} redtoggle ={redtoggle} />\n        <About mode = {mode}  togglemode = {togglemode}/>\n        </Route>\n        <Route path=\"/NAVBAR\">\n        <Alert alert={alert} />\n        <NAVBAR title=\"Navbar\" abouttext=\"Link \" mode={mode} redmode = {redmode}togglemode = {togglemode} redtoggle ={redtoggle} />\n        </Route>\n      </Switch>\n    </Router>\n        </div> */}\n      <div>\n        <NAVBAR title=\"Navbar\" abouttext=\"Link \" mode={mode} redmode={redmode} togglemode={togglemode} redtoggle={redtoggle} />\n        <Alert alert={alert} />\n        <Textform heading=\"Enter your text here : \" showalert={showalert} />\n        <About mode={mode} togglemode={togglemode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}